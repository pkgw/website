
jobs:

- job: upload
  pool:
    vmImage: ubuntu-latest

  steps:

  - download: current

  - checkout: self

  - task: DownloadSecureFile@1
    name: sshKey
    displayName: 'Download SSH key'
    inputs:
      secureFile: 'websitecd_ed25519'

  # This doesn't really need to be a secure file, but as long as we're using the
  # infrastructure ...
  - task: DownloadSecureFile@1
    name: knownHost
    displayName: 'Download known-hosts data'
    inputs:
      secureFile: 'newtoncx_knownhost.txt'

  # Ditto.
  - task: DownloadSecureFile@1
    name: sshConfig
    displayName: 'Download ssh_config data'
    inputs:
      secureFile: 'newtoncx_sshconfig.txt'

  # Surprisingly, it seems that the "secure files" are not given restrictive
  # filesystem permissions upon creation.
  - bash: |
      mkdir -p $HOME/.ssh
      cat $(knownHost.secureFilePath) >>$HOME/.ssh/known_hosts
      cp -p $(sshConfig.secureFilePath) $HOME/.ssh/config
      chmod 400 $HOME/.ssh/config $(sshKey.secureFilePath)
    displayName: Set up SSH for newton.cx

  # The authorization of this SSH key on the server has a "command" restriction
  # that forces the rsync operation and restricts things like port forwards. If
  # this command line changes, the authorized_keys file will need to change too.
  - bash: rsync -e 'ssh -i $(sshKey.secureFilePath)' -avP $(pipeline.workspace)/website/ newton.cx:public_html/
    displayName: rsync content

- job: push
  pool:
    vmImage: ubuntu-latest

  variables:
  - group: Deployment Credentials

  steps:

  - download: current

  - checkout: self
    fetchDepth: 0

  - bash: |
      git switch -c deploy
      git pull --ff-only $(pipeline.workspace)/git-release/deploy.bundle
    displayName: Restore deploy commit

  - bash: |
      set -euo pipefail
      d="$(mktemp -d /tmp/cranko.XXXXXX)"
      cd "$d"
      curl --proto '=https' --tlsv1.2 -sSf https://pkgw.github.io/cranko/fetch-latest.sh | sh
      echo "##vso[task.prependpath]$d"
    displayName: Install latest Cranko

  - bash: |
      ./cranko github install-credential-helper
    displayName: Set up Git pushes
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  - bash: git push origin deploy:deploy
    displayName: Push deploy branch
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)
