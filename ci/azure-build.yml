parameters:
- name: zolaVersion
  default: '0.18.0'
  type: string

jobs:

- job: build
  pool:
    vmImage: ubuntu-latest

  variables:
    TOOLCHAIN: stable

  steps:

  - checkout: self
    fetchDepth: 0

  - bash: |
      curl -fsSL \
        'https://github.com/getzola/zola/releases/download/v${{ parameters.zolaVersion }}/zola-v${{ parameters.zolaVersion }}-x86_64-unknown-linux-gnu.tar.gz' \
      | tar zx
    displayName: "Install Zola ${{ parameters.zolaVersion }}"

  - bash: |
      set -e
      rustup set profile minimal
      rustup component remove --toolchain=$TOOLCHAIN rust-docs || echo "already removed"
      rustup update --no-self-update $TOOLCHAIN
      rustup default $TOOLCHAIN
      # Log versions
      set -ex
      rustup -V
      rustc -Vv
      cargo -V
    displayName: Set up Rust

  # We save about 30s by building in debug rather than release mode.
  - bash: cargo build
    displayName: "Build deploytool"

  - bash: cargo run -- apply
    displayName: "deploytool apply"

  - bash: ./zola build -o $(build.artifactStagingDirectory)/website
    displayName: "Build site with Zola"

  - task: PublishPipelineArtifact@0
    displayName: Store built site as pipeline artifact
    inputs:
      artifactName: website
      targetPath: $(build.artifactStagingDirectory)/website

  # At some point we might add post-build analytics steps here

  - bash: |
      set -xeuo pipefail
      git add content
      cargo run -- commit
      git show
    displayName: "deploytool commit"

  - bash: |
      set -xeuo pipefail
      artifact_dir="$(build.artifactStagingDirectory)/git-deploy"
      mkdir -p "$artifact_dir"
      git bundle create "$artifact_dir/deploy.bundle" origin/main..HEAD
    displayName: "Bundle deploy commit"

  - task: PublishPipelineArtifact@1
    displayName: Publish git bundle artifact
    inputs:
      artifactName: git-deploy
      targetPath: $(build.artifactStagingDirectory)/git-deploy



- job: vartest
  pool:
    vmImage: ubuntu-latest

  steps:

  - bash: |
      set -x
      echo "SCU: $(system.collectionUri)"
      echo "TP: $(system.teamProject)"
      echo "BID: $(build.buildId)"
      echo "JID: $(system.jobId)"
      echo "DID: $(system.definitionId)"
      echo "CID: $(system.collectionId)"
      echo "PID: $(system.planId)"
      echo "TID: $(system.timelineId)"
      echo "TPID: $(system.teamProjectId)"
      u="$(system.collectionUri)$(system.teamProject)/_apis/build/builds/$(build.buildId)/timeline/$(system.timelineId)?api-version=5.1"
      curl -fsSL "$u"
    displayName: Print stuff

  - bash: |
      set -x
      u="$(system.collectionUri)$(system.teamProject)/_apis/build/builds/$(build.buildId)/timeline/$(system.timelineId)?api-version=5.1"
      curl -fsSL "$u"
    displayName: Print again
